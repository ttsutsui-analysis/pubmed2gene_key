app <- shinyApp(
ui = fluidPage(
plotOutput("plot")
),
server = function(input, output) {
output$plot <- renderPlot({
X <- 1:24
future::plan(future::multisession(workers = 6))
withProgressShiny(message = "Calculation in progress",
detail = "This may take a while ...", value = 0, {
p <- progressor(along = X)
y <- furrr::future_map(X, function(x) {
Sys.sleep(1)
p()
})
})
plot(cars)
})
}
)
runApp(app)
install.packages("furr")
app <- shinyApp(
ui = fluidPage(
plotOutput("plot")
),
server = function(input, output) {
output$plot <- renderPlot({
X <- 1:24
future::plan(future::multisession(workers = 6))
withProgressShiny(message = "Calculation in progress",
detail = "This may take a while ...", value = 0, {
p <- progressor(along = X)
future({
Sys.sleep(1)
p()
})
})
plot(cars)
})
}
)
runApp(app)
app <- shinyApp(
ui = fluidPage(
actionButton("act","button")
plotOutput("plot")
app <- shinyApp(
ui = fluidPage(
actionButton("act","button"),
plotOutput("plot")
),
server = function(input, output) {
output$plot <- renderPlot({
X <- 1:24
future::plan(future::multisession(workers = 6))
observeEvent(input$act,{
withProgressShiny(message = "Calculation in progress",
detail = "This may take a while ...", value = 0, {
p <- progressor(along = X)
future({
Sys.sleep(1)
p()
})
})
plot(cars)
})
})
}
)
runApp(app)
app <- shinyApp(
ui = fluidPage(
actionButton("act","button"),
plotOutput("plot")
),
server = function(input, output) {
output$plot <- renderPlot({
X <- 1:24
future::plan(future::multisession(workers = 6))
observeEvent(input$act,{
withProgressShiny(message = "Calculation in progress",
detail = "This may take a while ...", value = 0, {
p <- progressor(along = X)
future({
Sys.sleep(1)
p()
})
})
output$plot <- renderPlot({plot(cars)})
})
})
}
)
runApp(app)
app <- shinyApp(
ui = fluidPage(
actionButton("act","button"),
plotOutput("plot")
),
server = function(input, output) {
output$plot <- renderPlot({
X <- 1:24
future::plan(future::multisession(workers = 6))
observeEvent(input$act,{
withProgressShiny(message = "Calculation in progress",
detail = "This may take a while ...", value = 0, {
p <- progressor(along = X)
future({
for(i in X){
Sys.sleep(1)
p()
}
})
})
output$plot <- renderPlot({plot(cars)})
})
})
}
)
runApp(app)
app <- shinyApp(
ui = fluidPage(
actionButton("act","button"),
plotOutput("plot")
),
server = function(input, output) {
output$plot <- renderPlot({
X <- 1:24
future::plan(future::multisession(workers = 4))
observeEvent(input$act,{
withProgressShiny(message = "Calculation in progress",
detail = "This may take a while ...", value = 0, {
p <- progressor(along = X)
future({
for(i in X){
Sys.sleep(1)
p()
}
})
})
output$plot <- renderPlot({plot(cars)})
})
})
}
)
runApp(app)
library(progressr)
library(shiny)
library(future)
library(parallel)
library(progressr)
library(DT)
ui <- fluidPage(
actionButton(inputId = "go", label = "Launch calculation"),
DTOutput("table")
)
server <- function(input, output, session) {
observeEvent(input$go, {
Runs=c(1:4) #define the number of runs
plan(multisession, workers=4)
ls <- vector("list", 4)
for(j in Runs){
withProgressShiny({
p <- progressor(along = 1:10)
ls[[j]] <- future({
count <- NULL
for (i in 1:10) {
count <- c(count, rnorm(10000,i*j*sample(1:4,1)))
}
return(mean(count))
})
})
}
withProgress(message="wait",{
for(i in 1:10){Sys.sleep(1); incProgress(0.1)}
})
counts <- value(ls)
counts <- unlist(counts)
output$table <- renderDT({datatable(data.frame(counts))})
plan(multisession, workers=1)
})
}
runApp(shinyApp(ui, server))
library(shiny)
library(future)
library(parallel)
library(progressr)
library(DT)
ui <- fluidPage(
actionButton(inputId = "go", label = "Launch calculation"),
DTOutput("table")
)
server <- function(input, output, session) {
observeEvent(input$go, {
Runs=c(1:4) #define the number of runs
plan(multisession, workers=4)
ls <- vector("list", 4)
for(j in Runs){
withProgressShiny({
p <- progressor(along = 1:10)
ls[[j]] <- future({
count <- NULL
for (i in 1:10) {
count <- c(count, rnorm(10000,i*j*sample(1:4,1)))
Sys.sleep(1)
}
return(mean(count))
})
})
}
withProgress(message="wait",{
for(i in 1:10){Sys.sleep(1); incProgress(0.1)}
})
counts <- value(ls)
counts <- unlist(counts)
output$table <- renderDT({datatable(data.frame(counts))})
plan(multisession, workers=1)
})
}
runApp(shinyApp(ui, server))
library(shiny)
library(future)
library(parallel)
library(progressr)
library(DT)
ui <- fluidPage(
actionButton(inputId = "go", label = "Launch calculation"),
DTOutput("table")
)
server <- function(input, output, session) {
observeEvent(input$go, {
Runs=c(1:4) #define the number of runs
plan(multisession, workers=4)
ls <- vector("list", 4)
for(j in Runs){
withProgressShiny({
p <- progressor(along = 1:10)
ls[[j]] <- future({
count <- NULL
for (i in 1:10) {
count <- c(count, rnorm(10000,i*j*sample(1:4,1)))
Sys.sleep(1)
p()
}
return(mean(count))
})
})
}
withProgress(message="wait",{
for(i in 1:10){Sys.sleep(1); incProgress(0.1)}
})
counts <- value(ls)
counts <- unlist(counts)
output$table <- renderDT({datatable(data.frame(counts))})
plan(multisession, workers=1)
})
}
runApp(shinyApp(ui, server))
source('Desktop/R_analysis/test2.R')
library(shiny)
library(future)
library(parallel)
library(progressr)
library(DT)
ui <- fluidPage(
actionButton(inputId = "go", label = "Launch calculation"),
DTOutput("table")
)
server <- function(input, output, session) {
observeEvent(input$go, {
Runs=c(1:4) #define the number of runs
plan(multisession, workers=4)
ls <- vector("list", 4)
for(j in Runs){
withProgressShiny(message = "calculating",{
p <- progressor(along = 1:10)
ls[[j]] <- future({
count <- NULL
for (i in 1:10) {
count <- c(count, rnorm(10000,i*j*sample(1:4,1)))
Sys.sleep(1)
p("calculating")
}
return(mean(count))
})
})
}
withProgress(message="wait",{
for(i in 1:10){Sys.sleep(1); incProgress(0.1)}
})
counts <- value(ls)
counts <- unlist(counts)
output$table <- renderDT({datatable(data.frame(counts))})
plan(multisession, workers=1)
})
}
runApp(shinyApp(ui, server))
library(shiny)
library(future)
library(parallel)
library(progressr)
library(DT)
ui <- fluidPage(
actionButton(inputId = "go", label = "Launch calculation"),
DTOutput("table")
)
server <- function(input, output, session) {
observeEvent(input$go, {
Runs=c(1:4) #define the number of runs
plan(multisession, workers=4)
ls <- vector("list", 4)
for(j in Runs){
withProgressShiny(message = "calculating",{
p <- progressor(along = 1:10)
ls[[j]] <- future({
count <- NULL
for (i in 1:10) {
count <- c(count, rnorm(10000,i*j*sample(1:4,1)))
Sys.sleep(1)
p("calculating")
}
return(mean(count))
})
})
}
withProgress(message="wait",{
for(i in 1:10){Sys.sleep(1); incProgress(0.1)}
})
counts <- value(ls)
counts <- unlist(counts)
output$table <- renderDT({datatable(data.frame(counts))})
plan(multisession, workers=1)
})
}
runApp(shinyApp(ui, server))
library(shiny)
library(future)
library(parallel)
library(progressr)
library(DT)
ui <- fluidPage(
actionButton(inputId = "go", label = "Launch calculation"),
DTOutput("table")
)
server <- function(input, output, session) {
observeEvent(input$go, {
Runs=c(1:4) #define the number of runs
plan(multisession, workers=4)
ls <- vector("list", 4)
withProgressShiny(message = "calculating",{
for(j in Runs){
p <- progressor(along = 1:10)
ls[[j]] <- future({
count <- NULL
for (i in 1:10) {
count <- c(count, rnorm(10000,i*j*sample(1:4,1)))
Sys.sleep(1)
p("calculating")
}
return(mean(count))
})
}})
withProgress(message="wait",{
for(i in 1:10){Sys.sleep(0.2); incProgress(0.1)}
})
counts <- value(ls)
counts <- unlist(counts)
output$table <- renderDT({datatable(data.frame(counts))})
plan(multisession, workers=1)
})
}
runApp(shinyApp(ui, server))
sample(1:4,1)
sample(1:4,1)
sample(1:4,1)
sample(1:4,1)
sample(1:4,1)
sample(1:4,1)
source('Desktop/R_analysis/test2.R')
library(rentrez)
library(XML)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(stringr)
library(tm)
rm(list=ls())
# keyword enrichment analysis 2
keyword.all <- readRDS("~/Desktop/R_analysis/entrez_keyword2/data/gene_allpub_keyword_vector.rds")
keyword.all <- gsub("cells", "cell", keyword.all)
keyword.all <- gsub("Cells","Cell", keyword.all)
keyword.all <- gsub("cytokines","cytokine", keyword.all)
keyword.all <- gsub("Cytokines","Cytokine", keyword.all)
saveRDS(keyword.all, "~/Desktop/R_analysis/entrez_keyword2/data/gene_allpub_keyword_vector.rds")
# keyword cleaning
keywords.df <- as.data.frame(table(keyword.all))
View(keywords.df)
keyword.uni <- as.character(keywords.df$keyword.all)
uppers <- toupper(keyword.uni)
uppers.hyphen <- gsub("-", " ", uppers)
uppers.hyphen.dup <- duplicated(uppers.hyphen)
need.to.agg <- uppers.hyphen[uppers.hyphen.dup]
need.to.agg <- need.to.agg[!duplicated(need.to.agg)]
keywords.df.ok <- keywords.df[!uppers.hyphen %in% need.to.agg, ]
library(future.apply)
library(progressr)
plan(multisession, workers=4)
with_progress(expr = {
p <- progressr::progressor(steps=floor(length(need.to.agg)/50) )
df.new <- future_sapply(seq_along(need.to.agg), function(i){
term.i <- need.to.agg[i]
keywords.df.i <- keywords.df[uppers.hyphen==term.i, ]
df.i <- data.frame(keyword.all=keywords.df.i$keyword.all[1], Freq=sum(keywords.df.i$Freq))
tmp <- c(as.character(df.i$keyword.all), as.integer(df.i$Freq))
if(i%%50==0)p()
return(tmp)
})
})
df.new <- data.frame(t(df.new))
View(df.new)
df.new$X1 <- as.character(df.new$X1)
df.new$X2 <- as.integer(df.new$X2)
keywords.df.ok <- rbind(keywords.df.ok, setNames(df.new, names(keywords.df.ok)))
View(keywords.df.ok)
View(keywords.df)
keywords.df.ok <- keywords.df[!uppers.hyphen %in% need.to.agg, ]
View(keywords.df.ok)
x <-keywords.df[uppers.hyphen %in% need.to.agg, ]
View(x)
# keyword cleaning
keywords.df <- as.data.frame(table(keyword.all))
keywords.df <- keywords.df[order(keywords.df$Freq, decreasing = T),]
View(keywords.df)
keyword.uni <- as.character(keywords.df$keyword.all)
uppers <- toupper(keyword.uni)
uppers.hyphen <- gsub("-", " ", uppers)
uppers.hyphen.dup <- duplicated(uppers.hyphen)
need.to.agg <- uppers.hyphen[uppers.hyphen.dup]
need.to.agg <- need.to.agg[!duplicated(need.to.agg)]
keywords.df.ok <- keywords.df[!uppers.hyphen %in% need.to.agg, ]
View(keywords.df.ok)
x <-keywords.df[uppers.hyphen %in% need.to.agg, ]
View(x)
View(df.new)
View(need.to.agg)
View(data.frame(need.to.agg))
i=10
term.i <- need.to.agg[i]
keywords.df.i <- keywords.df[uppers.hyphen==term.i, ]
View(keywords.df.i)
df.i <- data.frame(keyword.all=keywords.df.i$keyword.all[1], Freq=sum(keywords.df.i$Freq))
tmp <- c(as.character(df.i$keyword.all), as.integer(df.i$Freq))
with_progress(expr = {
p <- progressr::progressor(steps=floor(length(need.to.agg)/50) )
df.new <- future_sapply(seq_along(need.to.agg[1:100]), function(i){
term.i <- need.to.agg[i]
keywords.df.i <- keywords.df[uppers.hyphen==term.i, ]
df.i <- data.frame(keyword.all=keywords.df.i$keyword.all[1], Freq=sum(keywords.df.i$Freq))
tmp <- c(as.character(df.i$keyword.all), as.integer(df.i$Freq))
if(i%%50==0)p()
return(tmp)
})
})
View(df.new)
df.new <- data.frame(t(df.new))
df.new$X1 <- as.character(df.new$X1)
df.new$X2 <- as.integer(df.new$X2)
keywords.df.ok <- rbind(keywords.df.ok, setNames(df.new, names(keywords.df.ok)))
View(keywords.df.ok)
View(keywords.df.ok)
with_progress(expr = {
p <- progressr::progressor(steps=floor(length(need.to.agg)/50) )
df.new <- future_sapply(seq_along(need.to.agg), function(i){
term.i <- need.to.agg[i]
keywords.df.i <- keywords.df[uppers.hyphen==term.i, ]
df.i <- data.frame(keyword.all=keywords.df.i$keyword.all[1], Freq=sum(keywords.df.i$Freq))
tmp <- c(as.character(df.i$keyword.all), as.integer(df.i$Freq))
if(i%%50==0)p()
return(tmp)
})
})
df.new <- data.frame(t(df.new))
df.new$X1 <- as.character(df.new$X1)
df.new$X2 <- as.integer(df.new$X2)
keywords.df.ok <- rbind(keywords.df.ok, setNames(df.new, names(keywords.df.ok)))
View(keywords.df.ok)
keywords.df.ok <- keywords.df[!uppers.hyphen %in% need.to.agg, ]
View(keywords.df.ok)
View(df.new)
names(df.new) <- names(keywords.df.ok)
View(df.new)
keywords.df.ok <- rbind(keywords.df.ok, df.new)
View(keywords.df.ok)
saveRDS(keywords.df.ok, "~/Desktop/R_analysis/entrez_keyword2/data/gene_allpub_keyword_df_cleaned.rds")
write.table(keywords.df.ok, "~/Desktop/R_analysis/entrez_keyword2/data/gene_allpub_keyword_df_cleaned.txt",sep="\t", row.names = F)
shiny::runApp('Desktop/R_analysis/entrez_keyword2/apps/pub2keyword_human')
library(shiny)
runApp('Desktop/R_analysis/entrez_keyword2/apps/pub2keyword_human')
runApp('Desktop/R_analysis/entrez_keyword2/apps/pub2keyword_human')
pkg <- ('rentrez','XML','shinydashboard','stringr','tm','DT','ggplot2','future','future.apply','progressr','pbapply','viridis','dplyr')
pkg <- ("rentrez","XML","shinydashboard","stringr","tm","DT","ggplot2","future","future.apply","progressr","pbapply","viridis","dplyr")
pkg <- c("rentrez","XML","shinydashboard","stringr","tm","DT","ggplot2","future","future.apply","progressr","pbapply","viridis","dplyr")
setwd("Desktop/git/pubmed2key_gene/apps/images/")
x <- list.files()
paste0("pub2geneFig",i,".png")
i=1
paste0("pub2geneFig",i,".png")
for(i in seq_along(x)){
file.copy(x[i], paste0("pub2geneFig",i,".png"))
file.remove(x[i])
}
x <- list.files()
